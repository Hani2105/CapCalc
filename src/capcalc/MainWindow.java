/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capcalc;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.Comment;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.RichTextString;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;

/**
 *
 * @author gabor_hanacsek
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    //a session adatok
    public static SessionObject so = new SessionObject();
    public AddWorkstation addws = new AddWorkstation(this, false, this);
    public workStationEdit ohe = new workStationEdit(this, false);
    //a ws-ek kulonallo heteinek adatainak módosítója
    public HetDataEdit hde = new HetDataEdit(this, false);
    //a workstationok pozicioja
    private static int womagassag = 0;

    public MainWindow() throws IOException {
        initComponents();
        setIcon();
        //teljes képernyőre tesszük
        //az smt adatok tábla excel szerkesztes
        new ExcelAdapter(jTable1);
        new ExcelAdapter(jTable2);
        new ExcelAdapter(jTable3);
        new ExcelAdapter(jTable4);
        this.setExtendedState(this.MAXIMIZED_BOTH);

        //a sessionadatok beolvasása, ha null írunk egyet
        if (new SessionKezelo().sessionOlvas() == null) {
            new SessionKezelo().sessionIr(this.so);
            System.out.println("session.dat létrehozása..");
        } else {
            this.so = new SessionKezelo().sessionOlvas();
            //be is töltjük őket ha már így áll a helyzet
            getCycleTimeFromSo();
            getDemandFromSo();
            getKapcsolatDatafromSo();
            //szamolunk is egyet
            try {
                calcOsszegzes();
            } catch (ParseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public static int getWomagassag() {
        return womagassag;
    }

    public static void setWomagassag(int womagassag) {
        MainWindow.womagassag = womagassag;
    }

    public void setIcon() {

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/pictures/calc.png")));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        jScrollPane6.setViewportView(jPanel2);

        jTabbedPane1.addTab("Kihasználtság", jScrollPane6);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cpID", "oraclepn", "smtprogname", "sline", "sequence", "boardnumber", "mertido", "gyorsmeres", "kalkulalt", "eff"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/deleterow.png"))); // NOI18N
        jLabel1.setToolTipText("Sorok törlése");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jLabel4.setText("Kereső:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SMT ciklusidők", jPanel1);

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cellname", "partnumber", "workstation", "ciklusido"
            }
        ));
        jTable2.setCellSelectionEnabled(true);
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/deleterow.png"))); // NOI18N
        jLabel2.setToolTipText("Sorok törlése");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel3.setText("Kereső:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Backend ciklusidők", jPanel3);

        jTable3.setAutoCreateRowSorter(true);
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Part", "Site", "Description", "PlannerCode", "Manufacturing LeadTime", "PlannedOrder", "StartDate", "AvailableDate", "MaterialAvailable", "DemandDate", "DueDate", "AvailableDate", "Qty", "Action", "Revision"
            }
        ));
        jTable3.setCellSelectionEnabled(true);
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/importdata.png"))); // NOI18N
        jLabel5.setToolTipText("Import Data");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setText("Kereső:");

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Demand", jPanel4);

        jTable4.setAutoCreateRowSorter(true);
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "PartNumber", "Default WS", "Alter 1", "Alter 2", "Alter 3"
            }
        ));
        jTable4.setCellSelectionEnabled(true);
        jTable4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable4KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel7.setText("Kereső:");

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/deleterow.png"))); // NOI18N
        jLabel8.setToolTipText("Sorok törlése");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Kapcsolatok", jPanel5);

        jTable5.setAutoCreateRowSorter(true);
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "PartNumber", "Demand", "Start Week", "Station", "CT/DB", "Gyártási idő (+eff)", "Efficiency"
            }
        ));
        jTable5.setCellSelectionEnabled(true);
        jTable5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable5KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jLabel9.setText("Kereső:");

        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField5KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Összegzés", jPanel6);

        jMenu1.setText("Adatok betöltése");

        jMenuItem2.setText("Ciklusidők lekérése adatbázisból");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Cilusidők betöltése a session fileból");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Demand adatok betöltése a session fileból");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Kapcsolati adatok betöltése a session fileból");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Kalkulációk");

        jMenuItem6.setText("Összegzés kiszámítása");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Állomás hozzáadása");

        jMenuItem1.setText("Állomás hozzáadása");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Export");

        jMenuItem7.setText("Export to excel");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //az smt ciklusidos tábla sorainak törlése
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked

        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        model.addRow(new Object[model.getColumnCount()]);
        jTable1.setModel(model);
    }//GEN-LAST:event_jLabel1MouseClicked

    //a backend ciklusidos tabla torlese
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        model.addRow(new Object[model.getColumnCount()]);
        jTable2.setModel(model);

    }//GEN-LAST:event_jLabel2MouseClicked

    //a táblák adatait visszatöltjük a listákba a változtatások után
    public void smtTableDataToList(JTable t) {
        //kiuritjuk a variables adatait
        so.getSmtcycletime().clear();
        //bejarjuk a tablat es feltoltjuk ujbol az adatokat a tömbbe
        for (int r = 0; r < t.getRowCount(); r++) {
            String[] adatok = new String[t.getColumnCount()];
            for (int c = 0; c < t.getColumnCount(); c++) {
                try {
                    adatok[c] = t.getValueAt(r, c).toString().trim();
                } catch (Exception e) {
                }
            }

            so.getSmtcycletime().add(adatok);

        }
        try {

            //ki is mentjuk
            new SessionKezelo().sessionIr(so);
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //default title and icon
        JOptionPane.showMessageDialog(this,
                "Sikeres módosítás");

    }

    //a táblák adatait visszatöltjük a listákba a változtatások után
    public void backendTableDataToList(JTable t) {
        //kiuritjuk a variables adatait
        so.getBackendcycletime().clear();
        //bejarjuk a tablat es feltoltjuk ujbol az adatokat a tömbbe
        for (int r = 0; r < t.getRowCount(); r++) {
            String[] adatok = new String[t.getColumnCount()];
            for (int c = 0; c < t.getColumnCount(); c++) {
                try {
                    adatok[c] = t.getValueAt(r, c).toString().trim();
                } catch (Exception e) {
                }
            }

            so.getBackendcycletime().add(adatok);

        }

        try {
            //kiirjuk az so-t
            new SessionKezelo().sessionIr(so);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        //default title and icon
        JOptionPane.showMessageDialog(this,
                "Sikeres módosítás");

    }

    // tábla szűrő kereső
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased

        new UniversalFilter(jTextField2.getText(), jTable1);
    }//GEN-LAST:event_jTextField2KeyReleased

    // tábla szűrő kereső
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

        new UniversalFilter(jTextField1.getText(), jTable2);
    }//GEN-LAST:event_jTextField1KeyReleased

    //az smt tabla adatainak felvitele a tömbbe
    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            smtTableDataToList(jTable1);
        }
    }//GEN-LAST:event_jTable1KeyPressed

    //a backend tábla adatainak felvitele a tömbbe
    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            backendTableDataToList(jTable2);
        }
    }//GEN-LAST:event_jTable2KeyPressed
    //a demand adatok beolvasasa tablaba
    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        //a táblába tesszük az adatokat és az so ba
        demandToTable();

    }//GEN-LAST:event_jLabel5MouseClicked
    //ciklusidők lekérése adatbázisból
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //lekérjük az smt adatokat
        getSmtCycleTime();
        //lekerjuk a backend idoket is
        getBackendCycleTime();

        //az automata szelesseg allitas
        new TableWidth(jTable1);
        new TableWidth(jTable2);
        //smtadatokat a táblába tesszük
        smtDataToTable();
        backendDataToTable();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    //ciklusidők beolvasása session filebol 
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        getCycleTimeFromSo();

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public void getCycleTimeFromSo() {

        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (int i = 0; i < so.getSmtcycletime().size(); i++) {

            model.addRow(so.getSmtcycletime().get(i));

        }

        jTable1.setModel(model);

        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        model1.setRowCount(0);
        for (int i = 0; i < so.getBackendcycletime().size(); i++) {

            model1.addRow(so.getBackendcycletime().get(i));

        }

        jTable2.setModel(model1);

    }


    private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            demandTableDataToList(jTable3);
        }
    }//GEN-LAST:event_jTable3KeyPressed
    //demand adatok betöltése a session filebol
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        getDemandFromSo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void getDemandFromSo() {

        // TODO add your handling code here:
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);

        for (int i = 0; i < so.getDemandList().size(); i++) {

            model.addRow(so.getDemandList().get(i));

        }

        jTable3.setModel(model);

    }


    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased
        new UniversalFilter(jTextField3.getText(), jTable3);
    }//GEN-LAST:event_jTextField3KeyReleased

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        new UniversalFilter(jTextField4.getText(), jTable4);
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);
        model.addRow(new Object[model.getColumnCount()]);
        jTable4.setModel(model);
    }//GEN-LAST:event_jLabel8MouseClicked
    //a kapcsolat adatok eltétele az so-ba
    private void jTable4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable4KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            kapcsolatDataToList(jTable4);
        }
    }//GEN-LAST:event_jTable4KeyPressed
    //a kapcsolati adatok betöltése a session filebol
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        getKapcsolatDatafromSo();

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyReleased
        // TODO add your handling code here:
        new UniversalFilter(jTextField5.getText(), jTable5);
    }//GEN-LAST:event_jTextField5KeyReleased
//az osszegzes futtatasa
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            calcOsszegzes();
        } catch (ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jTable5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable5KeyPressed
        //az összegzés mentése az so.ba
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            //kikapcsoljuk az editalast
            if (jTable5.isEditing()) {

                jTable5.getCellEditor().cancelCellEditing();
            }

            osszegzesToSo();
            //frissitsuk le a meglevo ws-eket az uj adattal
            for (int i = 0; i < jPanel2.getComponentCount(); i++) {

                if (jPanel2.getComponent(i) instanceof WorkStation) {

                    WorkStation ws = (WorkStation) jPanel2.getComponent(i);

                    for (int k = 0; k < ws.getWeekList().size(); k++) {
//                        System.out.println(ws.getWeekList().get(k).getTenyezoList().size());

                        ws.getWeekList().get(k).getSajatAdat();
                        ws.getWeekList().get(k).setSajatAdatToTable();

                    }

                }

            }

        }
    }//GEN-LAST:event_jTable5KeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // állomás hozzáadása //állomás hozzáadása
        addws.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            //exportálás excelbe
            exportToExcel();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    public void exportToExcel() throws FileNotFoundException, IOException {

        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Állomások");
        workbook.createSheet("Összegzés");
        //cella stílus

        //a kommenthez kell
        CreationHelper factory = workbook.getCreationHelper();
        Drawing drawing = sheet.createDrawingPatriarch();
        // When the comment box is visible, have it show in a 1x3 space
        ClientAnchor anchor = factory.createClientAnchor();
        Week wk = null;

        //ki kell szedni az állomások adatait egy objectumba
        int rowCount = 0;
        int columnCount = 0;
        for (int i = 0; i < jPanel2.getComponentCount(); i++) {
            if (jPanel2.getComponent(i) instanceof WorkStation) {

                WorkStation ws = (WorkStation) jPanel2.getComponent(i);
                //kellenek a columnanme adatok (hetek száma)
                //csinálunk egy sort
                columnCount = 0;
                rowCount++;
                Row row = sheet.createRow(++rowCount);
                //írjuk ki az állomás adatait, név, táarási idő, hatékonyság
                Cell cell = row.createCell(++columnCount);
                cell.setCellValue("Neve: " + ws.getName());
                cell = row.createCell(++columnCount);
                cell.setCellValue("Eff: " + ws.getHatekonysag());
                cell = row.createCell(++columnCount);
                cell.setCellValue("Tárazás: " + ws.getTarazasiido());
                columnCount = 0;
                row = sheet.createRow(++rowCount);
                //a hetek kiírása
                for (int k = 0; k < ws.jTable1.getColumnCount(); k++) {

                    //szedjuk ki a hetet
                    for (int h = 0; h < ws.getWeekList().size(); h++) {
                        if (ws.getWeekList().get(h).getWeekname().equals(ws.jTable1.getColumnName(k))) {

                            wk = ws.getWeekList().get(h);
                            break;
                        }

                    }

                    //csinálunk egy oszlopot
                    cell = row.createCell(++columnCount);
                    if (row.getCell(1).getStringCellValue().equals("Prefix")) {
                        CellStyle my_style = workbook.createCellStyle();
                        XSSFFont my_font = workbook.createFont();
                        my_font.setBold(true);
                        my_style.setFont(my_font);
                        my_style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
                        my_style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                        my_style.setAlignment(HorizontalAlignment.CENTER);
                        cell.setCellStyle(my_style);
                    }
                    try {
                        
                        cell.setCellValue(Integer.parseInt(ws.jTable1.getColumnName(k)));

                        //a kommentek
                        //szedjuk ossze a het adatait
                        //óraszám
                        String hetadatai = "Óraszám: " + wk.getOraszam() + "\n";
                        //factorok
                        for (int h = 0; h < wk.getTenyezoList().size(); h++) {

                            hetadatai += "Tényező: " + wk.getTenyezoList().get(h).getNeve() + " " + wk.getTenyezoList().get(h).getTenyezo() + "\n";
                        }

                        anchor.setCol1(cell.getColumnIndex());
                        anchor.setCol2(cell.getColumnIndex() + 4);
                        anchor.setRow1(row.getRowNum());
                        anchor.setRow2(row.getRowNum() + wk.getTenyezoList().size() + 1);
                        // Create the comment and set the text+author
                        Comment comment = drawing.createCellComment(anchor);
                        RichTextString str = factory.createRichTextString(hetadatai);
                        comment.setString(str);
                        comment.setAuthor("CapCalc");

                    } catch (Exception e) {
                        try {
                            
                            cell.setCellValue(ws.jTable1.getColumnName(k));

                        } catch (Exception ex) {
                        }
                    }

                }
                
                CellStyle simastyle = workbook.createCellStyle();
                simastyle.setAlignment(HorizontalAlignment.CENTER);
                
                //az adatok kiírása
                for (int r = 0; r < ws.jTable1.getRowCount(); r++) {

                    //csinálunk egy sort
                    row = sheet.createRow(++rowCount);

                    columnCount = 0;
                    for (int c = 0; c < ws.jTable1.getColumnCount(); c++) {
                        //csinálunk egy oszlopot

                        //szedjuk ki a hetet
                        for (int h = 0; h < ws.getWeekList().size(); h++) {
                            if (ws.getWeekList().get(h).getWeekname().equals(ws.jTable1.getColumnName(c))) {

                                wk = ws.getWeekList().get(h);
                                break;
                            }

                        }

                        cell = row.createCell(++columnCount);
                        cell.setCellStyle(simastyle);
                        //alkossuk meg a kommentet
                        String hetadatai = "";
                        int counter = 0;
                        for (int h = 0; h < wk.getGyartasok().size(); h++) {
                            if (wk.getGyartasok().get(h)[0].substring(0, 5).equals(row.getCell(1).getStringCellValue())) {
                                //szamoljuk ki az időt
                                double gyartasiido = 0.00;
                                try {
                                    //darabszam * ciklusido / pn efficency és ez orásítva
                                    gyartasiido = wk.calcGyartasiido(Double.parseDouble(wk.getGyartasok().get(h)[1]), Double.parseDouble(wk.getGyartasok().get(h)[4]), Double.parseDouble(wk.getGyartasok().get(h)[6]));

                                } catch (Exception ex) {
                                }

                                hetadatai += "PN: " + wk.getGyartasok().get(h)[0] + " Demand: " + wk.getGyartasok().get(h)[1] + " Idő: " + new DecimalFormat("#.##").format(gyartasiido) + "\n";
                                counter++;
                            }
                        }
                        if (hetadatai.length() > 0) {
                            anchor.setCol1(cell.getColumnIndex());
                            anchor.setCol2(cell.getColumnIndex() + 5);
                            anchor.setRow1(row.getRowNum());
                            anchor.setRow2(row.getRowNum() + counter + 1);
                            // Create the comment and set the text+author
                            Comment comment = drawing.createCellComment(anchor);
                            RichTextString str = factory.createRichTextString(hetadatai);
                            comment.setString(str);
                            comment.setAuthor("CapCalc");
                        }

                        //megprobaljuk doubleve convertalni, ha sikerul ugy irjuk ki, ha nem akkor legyen string
                        try {
                           
                            cell.setCellValue(Double.parseDouble(ws.jTable1.getValueAt(r, c).toString()));

//ha 80% legyen narancs
                            if (wk.getGyartasiora() > wk.getOraszam() * 0.8 && row.getCell(1).getStringCellValue().equals("SUM:")) {

                                CellStyle style = workbook.createCellStyle();
                                style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                                style.setAlignment(HorizontalAlignment.CENTER);
                                cell.setCellStyle(style);
                            }
//ha cell erteke nagyobb mint het oraszama akkor legyen piros
                            if (wk.getGyartasiora() > wk.getOraszam() && row.getCell(1).getStringCellValue().equals("SUM:")) {
                                CellStyle style = workbook.createCellStyle();
                                style.setFillForegroundColor(IndexedColors.RED.getIndex());
                                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                                style.setAlignment(HorizontalAlignment.CENTER);
                                cell.setCellStyle(style);

                            }

                        } catch (Exception e) {
                            try {
                                cell.getCellStyle().setAlignment(HorizontalAlignment.CENTER);
                                cell.setCellValue((String) ws.jTable1.getValueAt(r, c).toString());
                                //ha 80% legyen narancs
                                if (wk.getGyartasiora() > wk.getOraszam() * 0.8 && row.getCell(1).getStringCellValue().equals("SUM:")) {

                                    CellStyle style = workbook.createCellStyle();
                                    style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                                    style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                                    style.setAlignment(HorizontalAlignment.CENTER);
                                    cell.setCellStyle(style);
                                }
//ha cell erteke nagyobb mint het oraszama akkor legyen piros
                                if (wk.getGyartasiora() > wk.getOraszam() && row.getCell(1).getStringCellValue().equals("SUM:")) {
                                    CellStyle style = workbook.createCellStyle();
                                    style.setFillForegroundColor(IndexedColors.RED.getIndex());
                                    style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                                    style.setAlignment(HorizontalAlignment.CENTER);
                                    cell.setCellStyle(style);

                                }
                            } catch (Exception ex) {
                            }
                        }

                    }

                }

            }

            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            int retrival = chooser.showSaveDialog(null);
            if (retrival == JFileChooser.APPROVE_OPTION) {
                try (FileOutputStream outputStream = new FileOutputStream(chooser.getSelectedFile() + ".xlsx")) {
                    workbook.write(outputStream);
                    workbook.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }

    }

    public void getKapcsolatDatafromSo() {
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);

        for (int i = 0; i < so.getKapcsolatList().size(); i++) {

            model.addRow(so.getKapcsolatList().get(i));

        }

        jTable4.setModel(model);

    }

    public void kapcsolatDataToList(JTable t) {

        //kiuritjuk a variables adatait
        so.getKapcsolatList().clear();
        //bejarjuk a tablat es feltoltjuk ujbol az adatokat a tömbbe
        for (int r = 0; r < t.getRowCount(); r++) {
            String[] adatok = new String[t.getColumnCount()];
            for (int c = 0; c < t.getColumnCount(); c++) {
                try {
                    adatok[c] = t.getValueAt(r, c).toString().trim();
                } catch (Exception e) {
                }
            }

            so.getKapcsolatList().add(adatok);

        }

        try {
            //kiirjuk az so-t
            new SessionKezelo().sessionIr(so);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        //default title and icon
        JOptionPane.showMessageDialog(this,
                "Sikeres módosítás");

    }

    //az smt adatokat betesszuk a jtablaba, hogy lathatoak legyenek
    public void smtDataToTable() {

        //kinullazzuk a tabla sorait
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        //hozzáadjuk az időket
        for (int i = 0; i < so.getSmtcycletime().size(); i++) {

            model.addRow(new Object[]{so.getSmtcycletime().get(i)[0], so.getSmtcycletime().get(i)[1], so.getSmtcycletime().get(i)[2], so.getSmtcycletime().get(i)[3], so.getSmtcycletime().get(i)[4], so.getSmtcycletime().get(i)[5], so.getSmtcycletime().get(i)[6], so.getSmtcycletime().get(i)[7], so.getSmtcycletime().get(i)[8], so.getSmtcycletime().get(i)[9]});

        }

        jTable1.setModel(model);
        new TableWidth(jTable1);

    }

    //a backend adatokat betesszuk a jtablaba, hogy lathatoak legyenek
    public void backendDataToTable() {

        //kinullazzuk a tabla sorait
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        //hozzáadjuk az időket
        for (int i = 0; i < so.getBackendcycletime().size(); i++) {

            model.addRow(new Object[]{so.getBackendcycletime().get(i)[0], so.getBackendcycletime().get(i)[1], so.getBackendcycletime().get(i)[2], so.getBackendcycletime().get(i)[3]});

        }

        jTable2.setModel(model);
        new TableWidth(jTable2);

    }

    //az smt ciklusidok lekerese
    public void getSmtCycleTime() {

        connections con = null;
        try {
            //lekérdezzük az smt-s ciklusidőket és eltesszük a variable classba
            //kinullázzuk a variable tömbjét
            so.getSmtcycletime().clear();
            String query = "SELECT cycletime_prog.ID as cpID, oraclepn ,smtprogname, smtline as sline, sequence , boardnumber ,(SELECT value FROM cycletime_data WHERE cycletime_prog_id = cpID AND priority = 1 AND cycletime_data.active = 1 ORDER BY ID DESC LIMIT 1) as mertido,(SELECT value FROM cycletime_data WHERE cycletime_prog_id = cpID AND priority = 2 AND cycletime_data.active = 1 ORDER BY ID DESC LIMIT 1) as gyorsmeres,(SELECT value FROM cycletime_data WHERE cycletime_prog_id = cpID AND priority = 3 AND cycletime_data.active = 1 ORDER BY ID DESC LIMIT 1) as kalkulalt,IFNULL(expectedeffbyprog,COALESCE((SELECT expectedeff FROM cycletime_config WHERE smtline = sline),(SELECT expectedeff FROM cycletime_config WHERE smtline = 'ALL'))) as eff FROM `cycletime_prog` \n"
                    + "WHERE cycletime_prog.active=1 /*and oraclepn like '%\" + jTextField18.getText().trim() + \"%' */ORDER BY smtprogname;";
            con = new connections("com.mysql.jdbc.driver", "jdbc:mysql://143.116.140.113/plrdb", "cpi", "cpi602");
            ResultSet rs = (ResultSet) con.lekerdez(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            while (rs.next()) {

                String adatok[] = new String[rsmd.getColumnCount()];
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                    adatok[i - 1] = rs.getString(i);

                }

                so.getSmtcycletime().add(adatok);

            }

            //kiirjuk az so-t
            new SessionKezelo().sessionIr(so);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            //custom title, error icon
            JOptionPane.showMessageDialog(this,
                    "Nem sikerült az SMT ciklusidők lekérése!\n" + ex.getMessage(),
                    "Hiba",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "Nem sikerült az SMT ciklusidők lekérése!\n" + ex.getMessage(),
                    "Hiba",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                con.kinyir();
            } catch (Exception ex) {
                Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    //a backend ciklusidok lekerese
    private void getBackendCycleTime() {

        connections con = null;
        try {
            //lekérdezzük az smt-s ciklusidőket és eltesszük a variable classba
            //kinullázzuk a variable tömbjét
            so.getBackendcycletime().clear();
            String query = "select tc_becells.cellname, tc_bepns.partnumber, tc_bestations.workstation, tc_prodmatrix.ciklusido from tc_prodmatrix\n"
                    + "left join tc_becells on tc_becells.idtc_cells = tc_prodmatrix.id_tc_becells\n"
                    + "left join tc_bepns on tc_bepns.idtc_bepns = tc_prodmatrix.id_tc_bepns\n"
                    + "left join tc_bestations on tc_bestations.idtc_bestations = tc_prodmatrix.id_tc_bestations\n"
                    + "where tc_becells.idtc_cells = tc_prodmatrix.id_tc_becells\n"
                    + "and tc_bepns.idtc_bepns = tc_prodmatrix.id_tc_bepns\n"
                    + "and tc_bestations.idtc_bestations = tc_prodmatrix.id_tc_bestations";
            con = new connections("com.mysql.jdbc.driver", "jdbc:mysql://143.116.140.114/planningdb", "plan", "plan500");
            ResultSet rs = (ResultSet) con.lekerdez(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            while (rs.next()) {

                String adatok[] = new String[rsmd.getColumnCount()];
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {

                    adatok[i - 1] = rs.getString(i);

                }

                so.getBackendcycletime().add(adatok);

            }

            //kiirjuk az so-t
            new SessionKezelo().sessionIr(so);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            //custom title, error icon
            JOptionPane.showMessageDialog(this,
                    "Nem sikerült a backend ciklusidők lekérése!\n" + ex.getMessage(),
                    "Hiba",
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "Nem sikerült a backend ciklusidők lekérése!\n" + ex.getMessage(),
                    "Hiba",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                con.kinyir();
            } catch (Exception ex) {
                Logger.getLogger(CapCalc.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    //a gyártási igények táblába tétele
    public void demandToTable() {
        JFileChooser chooser = Filechooser.getFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Tabbed files", "tab");
        chooser.setFileFilter(filter);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            JFileChooser chooser = CTB_Filechooser.getFileChooserRiport();
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

            File file = chooser.getSelectedFile();
            //átírjuk a sessionban a demand elérési utját
            so.setDemandLastDir(file.getPath());
            try {
                //át is írjuk a filet
                new SessionKezelo().sessionIr(so);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            //kinullazzuk a tabloa modelljet
            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);
            //letrehozunk egy olvasot
            BufferedReader in;
            try {
                in = new BufferedReader(new FileReader(file));
                String line = in.readLine();
                //kitöröljük az so adatokat
                so.getDemandList().clear();
                while ((line = in.readLine()) != null) {

                    String[] cells = line.split("\\t");
                    model.addRow(cells);
                    //hozzáadjuk a wo adatokat az so hoz
                    so.getDemandList().add(cells);

                }

                //kiirjuk az so.t
                new SessionKezelo().sessionIr(so);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public void demandTableDataToList(JTable t) {

        //kiuritjuk a variables adatait
        so.getDemandList().clear();
        //bejarjuk a tablat es feltoltjuk ujbol az adatokat a tömbbe
        for (int r = 0; r < t.getRowCount(); r++) {
            String[] adatok = new String[t.getColumnCount()];
            for (int c = 0; c < t.getColumnCount(); c++) {
                try {
                    adatok[c] = t.getValueAt(r, c).toString().trim();
                } catch (Exception e) {
                }
            }

            so.getDemandList().add(adatok);

        }

        try {
            //kiirjuk az so-t
            new SessionKezelo().sessionIr(so);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        //default title and icon
        JOptionPane.showMessageDialog(this,
                "Sikeres módosítás");

    }

    //ha kezzel belenyulunk az osszegzesbe azt is mentsuk vissza az so.ba
    public void osszegzesToSo() {

        //kiuritjuk az so adatait
        so.getOsszegzes().clear();
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable5.getModel();

        //bejarjuk a tablat es az adatait betesszuk az so-ba
        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                double ct = Double.parseDouble(model.getValueAt(i, 4).toString());
                int qty = Integer.parseInt(model.getValueAt(i, 1).toString());
                double eff = Double.parseDouble(model.getValueAt(i, 6).toString());

                String[] adatok = new String[7];
                adatok[0] = model.getValueAt(i, 0).toString();
                adatok[1] = model.getValueAt(i, 1).toString();
                adatok[2] = model.getValueAt(i, 2).toString();
                adatok[3] = model.getValueAt(i, 3).toString();
                adatok[4] = model.getValueAt(i, 4).toString();

                double idoigeny = ((ct * qty) / 60) / 60 / eff;
                adatok[5] = String.valueOf(new DecimalFormat("#.##").format(idoigeny));

                adatok[6] = model.getValueAt(i, 6).toString();
                so.getOsszegzes().add(adatok);
            } catch (Exception e) {

            }

        }

    }

    //a megadott adatok alapjan kell csinalni egy osszegzest
    public void calcOsszegzes() throws ParseException {
        //kinullazzuk a tablat
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable5.getModel();
        model.setRowCount(0);
        //kinullazzuk az adatokat
        so.getOsszegzes().clear();
        //be kell jarni a demand tablat soronkent, meg kell keresni hozzá a default stationt, a ciklusidoket es a starthetet kiszamolni
        //a demand tabla beforgatasa
        outerloop:
        for (int d = 0; d < so.getDemandList().size(); d++) {
//felvesszuk a pn valtozot
            String pn = so.getDemandList().get(d)[1].trim().toUpperCase();
//átalakítjuk a startdátumot évhétté
            String startdate = evhet(so.getDemandList().get(d)[7].trim());
//kiszedjuk a gyartando darabszamot
            int qty = 0;
            try {
                qty = Integer.parseInt(so.getDemandList().get(d)[13].replaceAll("[^0-9]", ""));
            } catch (Exception e) {
            }
//be kell jarni a kapcsolatok tablat es meg kell keresni, hogy letezik e ehhez a pn hez hozzaadott sor vagy cella
            String defaultws = "";

            for (int k = 0; k < so.getKapcsolatList().size(); k++) {
//ha megvan a pn ben a kapcsoaltlista pn je
                if (pn.equals(so.getKapcsolatList().get(k)[0].trim().toUpperCase())) {
//megnezzuk, hogy van e hozza default sor, vagyis kell, hogy legyen
                    defaultws = so.getKapcsolatList().get(k)[1].trim();
                    break;

                }

            }
//akkor megyünk tovább ha van default ws, ha nincs akkor azt írjuk be az összegzésbe, hogy az kellene..
            if (defaultws.equals("")) {

                String[] adatok = new String[7];
                adatok[0] = pn;
                adatok[1] = String.valueOf(qty);
                adatok[2] = startdate;
                adatok[3] = "Nincs default állomás!";
                adatok[4] = "";
                adatok[5] = "";
                adatok[6] = "";

                so.getOsszegzes().add(adatok);
                model.addRow(adatok);
                //johet a kovetkezo sor
                continue outerloop;
            } //ha van default állomás akkor megpróbáljuk megkeresni az smt-s ciklusidők között a pn-t és az állomás kombót
            else if (!defaultws.equals("")) {
                //a cycletime
                double ct = 0.00;
                double eff = 0.00;
                //panelizacio

                for (int c = 0; c < so.getSmtcycletime().size(); c++) {

                    if (pn.equals(so.getSmtcycletime().get(c)[1].trim().toUpperCase()) && defaultws.toUpperCase().trim().equals(so.getSmtcycletime().get(c)[3].toUpperCase().trim())) {
//a legerosebb merest kell alapul venni
                        //ha kalkulalt
                        try {
                            if (so.getSmtcycletime().get(c)[8] != null) {

                                ct += Double.parseDouble(so.getSmtcycletime().get(c)[8]) / Double.parseDouble(so.getSmtcycletime().get(c)[5]);
                                eff = Double.parseDouble(so.getSmtcycletime().get(c)[9]) / 100;

                                continue;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        } //ha gyorsmeres van

                        try {
                            if (so.getSmtcycletime().get(c)[7] != null) {

                                ct += Double.parseDouble(so.getSmtcycletime().get(c)[7]) / Double.parseDouble(so.getSmtcycletime().get(c)[5]);
                                eff = Double.parseDouble(so.getSmtcycletime().get(c)[9]) / 100;
                                continue;
                            }
                        } catch (Exception e) {
                        }//mert
                        try {
                            if (so.getSmtcycletime().get(c)[6] != null) {

                                ct += Double.parseDouble(so.getSmtcycletime().get(c)[6]) / Double.parseDouble(so.getSmtcycletime().get(c)[5]);
                                eff = Double.parseDouble(so.getSmtcycletime().get(c)[9]) / 100;
                                continue;
                            }
                        } catch (Exception e) {
                        }

                    }

                }

//ha végigértünk és nulla a ct akkor kiirjuk, hogy nincs ciklusido smt-n
                if (ct == 0.00) {

                    String[] adatok = new String[7];
                    adatok[0] = pn;
                    adatok[1] = String.valueOf(qty);
                    adatok[2] = startdate;
                    adatok[3] = defaultws;
                    adatok[4] = "Nincs megadott ciklusidő SMT-n!";
                    adatok[5] = "";
                    adatok[6] = "";
                    so.getOsszegzes().add(adatok);
                    model.addRow(adatok);

                } //ha van ct
                else if (ct > 0.00) {
//ki kell számolni az össz igénybe vett időt
//a ciklusidők panel szinten vannak megadva az adatbazisban!!!!!!!!!!!!!!!!!!!!!!
                    String[] adatok = new String[7];
                    adatok[0] = pn;
                    adatok[1] = String.valueOf(qty);
                    adatok[2] = startdate;
                    adatok[3] = defaultws;
                    adatok[4] = new DecimalFormat("#.##").format(ct);
                    double idoigeny = ((ct * qty) / 60) / 60 / eff;
                    adatok[5] = String.valueOf(new DecimalFormat("#.##").format(idoigeny));
                    adatok[6] = String.valueOf(eff);

//meg kell nezni, hogy eltezik e mar ilyen adat a listben es ha igen akkor csak ossze kell adni az ertekeket es nem uj sort letrehozni
                    so.getOsszegzes().add(adatok);
                    model.addRow(adatok);

                }

            }

        }

        jTable5.setModel(model);

    }

    public String evhet(String datum) throws ParseException {
        String evhet = "";
        String format = "dd-MMM-yy";

        SimpleDateFormat df = new SimpleDateFormat(format);
        try {
            Date date = df.parse(datum);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            int week = cal.get(Calendar.WEEK_OF_YEAR);
            int year = cal.get(Calendar.YEAR);
            String weekstring = "";
            if (String.valueOf(week).length() == 1) {

                weekstring = "0" + String.valueOf(week);

            } else {
                weekstring = String.valueOf(week);
            }

            evhet = String.valueOf(year).substring(2) + weekstring;
            return evhet;
        } catch (Exception e) {
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
